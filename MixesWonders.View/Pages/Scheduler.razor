@page "/Scheduler"

@using MixeWonders.Client.Helpers
@using MixeWonders.Client.ViewModels
@using MixeWonders.Values.Enums
@using MudBlazor

<MudDropContainer T="DropItem" Items="_items" CanDropClass="mud-border-info" NoDropClass="mud-border-error" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="w-100 border-2 border-solid mud-border-lines-default">
    <ChildContent>
        <div class="d-flex w-100 justify-content-around">
            <div class="w-100">
                <MudDropZone T="DropItem" Identifier="default" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-4">Elementer</MudText>
                </MudDropZone>
            </div>
            <div class="w-100">
                <div class="d-flex w-100">
                    <MudText Class="d-flex w-100 justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default"></MudText>
                    @for (int c = 0; c < Enum.GetValues(typeof(WeekDay)).Length; c++)
                    {
                        var weekday = (WeekDay)c;
                        <MudText Class="d-flex w-100 justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default">@weekday</MudText>
                    }
                </div>
                @{
                    var start = StartTime;
                    @while (EndTime >= start)
                    {
                        var row = start.ToString();

                        <div class="d-flex w-100">
                            @for (int c = 0; c < Enum.GetValues(typeof(WeekDay)).Length; c++)
                            {
                                WeekDay w = (WeekDay)c;
                                var col = w.ToString();
                                @if (c == 0)
                                {
                                    <MudText Class="d-flex w-100 justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default">@row.Split(':')[0]:@row.Split(':')[1]</MudText>
                                }
                                <MudDropZone T="DropItem" Identifier="@($"{row} {col}")" DraggingClass="mud-theme-success" Class="d-flex w-100 justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" Style="height:32px;" />
                            }
                        </div>
                        start = start.Add(Interval);

                    }
                }
            </div>

        </div>
    </ChildContent>
    <ItemRenderer>
        <div class="d-flex justify-center align-center flex-grow-1">
            <MudIcon Icon="@context.Icon" Color="@context.Color" Size="Size.Small" />
        </div>
    </ItemRenderer>
</MudDropContainer>

@code{
    public List<DropItem> _items { get; set; }
    public List<DropItem> _FolderItems { get; set; }
    public TimeSpan EndTime { get; set; }
    public TimeSpan StartTime { get; set; }
    public TimeSpan Interval { get; set; }
    public int NumOfCols { get; set; } = 0;

    protected async override Task OnInitializedAsync()
    {
        EndTime = new TimeSpan(24, 0, 0);
        StartTime = new TimeSpan(8, 0, 0);
        Interval = new TimeSpan(0, 5, 0);

        _items = TimeblockSchedulerHelper.GetDropItems(TimeSpan.FromMinutes(5));
        _FolderItems = TimeblockSchedulerHelper.GetDropFolderItems();
        StateHasChanged();

    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        if (dropItem.Item.Identifier == "default" && dropItem.DropzoneIdentifier != "default")
        {

            WeekDay weekday;
            Enum.TryParse(dropItem.DropzoneIdentifier.Split(' ')[1], out weekday);
            _items.Add(new DropItem() { Color = dropItem.Item.Color, Identifier = dropItem.DropzoneIdentifier, Icon = dropItem.Item.Icon, Day = weekday });
        }
        else
        {
            dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
        }
        StateHasChanged();
    }
}
