@page "/fetchleagues"
@using MixeWonders.ValueModel.Api
@using MudBlazor


<PageTitle>Fetch Leagues</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Events for Round @SelectedRoundNum (@SelectedSeason)</MudText>
    <MudGrid Class="mt-6 px-4">
        <MudSelect T="int" SelectedValuesChanged="() => UpdateLeague()" @bind-Value="SelectedRoundNum" Disabled="false" ReadOnly="false" Label="Vælg runde" HelperText="Round" Placeholder="Vælg runde" AdornmentIcon="@Icons.Material.Filled.Flag" AdornmentColor="Color.Primary">
            @foreach (var round in RoundList)
            {
                <MudSelectItem Value="@(round)">Runde @round</MudSelectItem>

            }
        </MudSelect>
        <div class="mr-1"></div>
        <MudSelect T="string" SelectedValuesChanged="() => UpdateLeague()" @bind-Value="SelectedSeason" Disabled="false" ReadOnly="false" Label="Vælg Sæson" HelperText="Season" Placeholder="Vælg Sæson" AdornmentIcon="@Icons.Material.Filled.Grass" AdornmentColor="Color.Primary">
            @foreach (var season in SeasonList)
            {
                <MudSelectItem Value="@(season)">Sæson @season</MudSelectItem>
            }
        </MudSelect>
    </MudGrid>

    @if (eventResponse == null)
    {
        <MudText Typo="Typo.body1"><em>Loading...</em></MudText>
    }
    else
    {
        <MudList T="PL_EventAPIResponse">
            @if (eventResponse == null || eventResponse.events == null || eventResponse.events.Count == 0)
            {
                <MudText Typo="Typo.h3">
                    Ingen kampe at vise
                </MudText>
            }
            else
            {

                @foreach (var eventItem in eventResponse.events)
                {
                    <MudListItem T="PL_EventAPI">
                        <div class="d-flex flex-grow-1 gap-4">
                            <MudPaper Class="flex-grow-1 py-8 mud-theme-primary d-flex justify-space-between" Width="32px" Elevation="0">
                                <MudText Typo="Typo.body1">
                                    @eventItem.strHomeTeam
                                </MudText>
                            </MudPaper>
                            <MudPaper Class="d-flex justify-space-between" MinWidth="64px" Elevation="0">
                                <MudNumericField T="int" Class="mt-1" Min="0" HideSpinButtons="false" Value="GetIntFromString(eventItem.intHomeScore)" />
                            </MudPaper>

                            <MudPaper Class="flex-grow-0 align-content-center py-8 mud-theme-primary d-flex justify-center" Width="32px" Elevation="0">
                                <MudText Typo="Typo.body1" Class="m-2"> VS </MudText>
                            </MudPaper>

                            <MudPaper Class="d-flex justify-space-between" MinWidth="64px" Elevation="0">
                                <MudNumericField T="int" Class="mt-1" Min="0" HideSpinButtons="false" Value="GetIntFromString(eventItem.intAwayScore)" />
                            </MudPaper>
                            <MudPaper Class="flex-grow-1 py-8 mud-theme-primary d-flex justify-space-between" Width="32px" Elevation="0">
                                <MudText Typo="Typo.body1">
                                    @eventItem.strAwayTeam
                                </MudText>
                            </MudPaper>

                        </div>
                    </MudListItem>
                }
            }
        </MudList>
    }
</MudContainer>

@code {
    [Inject] private HttpClient httpClient { get; set; }
    public int SelectedRoundNum { get; set; }
    public int RoundNumLimit { get; set; } = 38;
    private List<int> RoundList => Enumerable.Range(1, RoundNumLimit).ToList();
    private List<string> SeasonList => new List<string>() 
    { 
        "2015-2016", "2016-2017", "2017-2018", "2018-2019", "2019-2020", "2020-2021", "2021-2022", "2022-2023", "2023-2024", "2024-2025" 
    };
    private string SelectedSeason { get; set; }
    private PL_EventAPIResponse eventResponse;
    private string RequestUri { get; set; }
    private bool HasPassedDeadline { get; set; }


    private int GetIntFromString(string? text) => int.Parse(text ?? "0");
    protected override async Task OnInitializedAsync()
    {
        await UpdateLeague();
    }
    public async Task UpdateLeague()
    {
        RequestUri = $"https://www.thesportsdb.com/api/v1/json/3/eventsround.php?id=4328&r={SelectedRoundNum}&s={SelectedSeason}";
        eventResponse = await httpClient.GetFromJsonAsync<PL_EventAPIResponse>(RequestUri) ?? new PL_EventAPIResponse() { events = new List<PL_EventAPI>() };
    }


}
