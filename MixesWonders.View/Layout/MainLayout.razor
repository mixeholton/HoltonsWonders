@using MixeWonders.Values.Enums
@using MixeWonders.Values.Services
@using MixeWonders.Values.Values
@inherits LayoutComponentBase
@inject CurrentUserService CurrentUser;
@inject NavigationManager navigationManager;

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


@if (CurrentUser.CurrentUser?.IsValid(GetPermissionFromUrl(navigationManager.Uri.Split("/").Last().Split("net").Last())) ?? false)
{
    <MudLayout>
        <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            Mixe Wonders
        </MudAppBar>
        <MudDrawer @bind-Open="@_drawerOpen">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
}
else
{
    
    <Login></Login>
}   
@code {
    bool _drawerOpen = true;

    public PermissionType GetPermissionFromUrl(string url)
    => url switch
        {
            "" => PermissionType.Home,
            "Bill" => PermissionType.Bill,
            "Football" => PermissionType.Football,
            "BoardGames" => PermissionType.BoardGames,
            "Counter" => PermissionType.Counter,
            "Admin" => PermissionType.Admin,
            "SuperAdmin" => PermissionType.SuperAdmin,
            "BillAdvanced" => PermissionType.BillAdvanded,
            "Permissions" => PermissionType.Permissions,
            "Users" => PermissionType.Users,
            "Scheduler" => PermissionType.Scheduler,
            _ => PermissionType.None
        };    
    
    public void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}